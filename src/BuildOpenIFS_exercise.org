#+OPTIONS: toc:nil ^:nil
#+LATEX_CLASS_OPTIONS: [12pt, a4paper]
#+LATEX_HEADER: \input{exercise_header.tex}

*LABORATORY COURSE IN NUMERICAL METEOROLOGY*\\
*Exercise 2, Fri Jan 29 14:15-16:00 2016, E206*

* Building OpenIFS

The primary goal of this exercise is to teach how to build scientific
software from sources in high-performance computing (HPC)
environment. The secondary goal is to demonstrate how to automate and
document the build process by writing it as a program. The same
approach is fruitful in other tasks, such as running the experiments
and post-processing the results, too. It's better to be a programmer
than a computer.

The major bulk of the text in this exercise describes in detail the
script that builds OpenIFS from the sources in CSC's general purpose
cluster taito.csc.fi using GNU Fortran compiler.

I follow the OpenIFS build instructions

- [[https://software.ecmwf.int/wiki/display/OIFS/User+Guide]]

and refer to /CSC computing environment guide/ and /Taito users guide/
documents about the computing environment

- [[https://research.csc.fi/csc-guide]]
- [[https://research.csc.fi/taito-user-guide]]

Although this document is verbose, the number of program lines is
actually small.

** Exercise setup

All the material is in the GitHub repository [[https://github.com/jlento/NumLab2016][NumLab2016]] as in the
previous exercise. The build script that we go through in this
exercise is in the sub-directory ~NumLab2016/scripts/~.

I have split the build script in two files. The first file
~oifs_env_gnu_taito.bash~ contains compiler (GNU) and host (taito)
specific environment setup and definitions etc, and the second file
~oifs_build.bash~ contains the actual build steps. You should open
these files in a web browser directly from GitHub, or in an editor, if
you have cloned (and updated!!!) the repository, so that you can view
the scripts in one piece.

*** OpenIFS source

*OpenIFS is not open source. Do not distribute it!*

Our OpenIFS license covers only computers owned by the University of
Helsinki and CSC. Do not install OpenIFS on any computer not owned by
the University of Helsinki or CSC.

OpenIFS source file archive ~oifs38r1.tgz~ is already
downloaded from ~ftp.ecmwf.int~ to a local disk at CSC. Ask the
instructors where to find it on taito.

*** Dynamic executable

We will build a dynamically linked OpenIFS executable. The linker
needs to find the same libraries at runtime which were included at
the compile time. There are basically two ways to achieve this.

1. hardcode the full path names of the libraries into the executable
   /at the build time/ (*RPATH*)
2. set the linker library search path /at the runtime/ (*LD_LIBRARY_PATH*)

Both have their uses. The current module system in taito follows the
second approach, and modifies the linker search path using environment
variable ~LD_LIBRARY_PATH~. The idea is that when the same modules are
loaded both at the build and at the runtime, the linker should find
the right libraries.

If we think building and running OpenIFS as programming tasks, an
obvious way to have the same environment in both tasks is to write the
environment setup in a single, separate "header" file, here
~oifs_env_gnu_taito.bash~, and include that at the beginning of both
the build and the run scripts.

** Build environment setup

*** Build environment and prerequisites

ECMWF documentation lists the [[https://software.ecmwf.int/wiki/display/OIFS/Prerequisites][prerequisities]] needed for building and
running OpenIFS. Usually the best approach with a new build
is to find out which of the prerequisites are already available.

OpenIFS links against, i.e. requires subroutines from, *MPI*,
*LAPACK/BLAS*, and *grib-api* libraries. Grib-api requires *netcdf*
library, which in turn requires *hdf5* library. We can use module
system, command `module spider`, and [[https://research.csc.fi/taito-user-guide][Taito Users Guide]], to find a
compatible combination of modules that provide the required
libraries. This step may require some experience, so in general, do
not hesitate to ask help.

Let us put the commands that load environment modules first into the
file ~oifs_env_gnu_taito.bash~:

#+BEGIN_SRC bash -n :tangle ../scripts/oifs_env_gnu_taito.bash
# Load environment modules
module purge
module load gcc/4.9.3 intelmpi/5.1.1 mkl/11.3.0
module load hdf5-serial/1.8.15 netcdf4-serial/4.3.3.1
module load grib-api/1.14.2
#+END_SRC

*** BLAS and LAPACK compile and link options

I choose to use BLAS and LAPACK routines from Intel's MKL
library. Figuring out proper linker options (flags) needed for
including MKL could be challenging. Fortunately Intel provides a link
tool to help here. You could also use a web page [[https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor][IntelÂ® Math Kernel
Library Link Line Advisor]] and cut'n'paste the required flags into the
~OIFS_*~ variables later.

Here, I write a small wrapper function around the link line advisor,
of which output I can directly include in the build options:

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# MKL link line tool setup
mklopts="-c gnu_f -o gomp"
mkltool() {
    local mode="$1"
    local mklopts="$2"
    local mklcmd=${MKLROOT}/tools/mkl_link_tool
    echo "$($mklcmd $mode $mklopts 2> /dev/null | tr '()' '{}')"
}
#+END_SRC

*Q:* Run the link tool and play with the www-page. What
flags actually go to the compiler and linker?

*Q:* What is ~2>/dev/null~ doing at the end of ~$mklcmd~
command, and why it is there?

*** OpenIFS build system

Next we need to inform the OpenIFS build system about which kind of
version of OpenIFS we wish to build, and about the particularities of
our environment. Basically this usually boils down to telling which
compiler to use, against which libraries to link, and where to find
them. These details are given to OpenIFS build system using ~OIFS_*~
environment variables.

Unlike for a regular workstation Linux distributions, writing a
generic configuration script for all HPC environments that could
automatically "guess" the best combination of "everything" is really
hard. The choice that OpenIFS developers have made here, that they
require the user to have enough expertise to set some details
manually, is a sensible one.

OpenIFS uses a build tool called FCM. [[https://software.ecmwf.int/wiki/display/OIFS/Building+OpenIFS][OpenIFS build documentation]]
recommends to add the location of the fcm binary to the search
path. Instead of modifying the ~PATH~ environment variable, I choose
to call fcm directly from where it is, using it's path name.

*** Configuration templates

OpenIFS comes with a set of (FCM specific format) configuration
templates for different compilers and optimization levels and what
not. We can choose either to modify a template or to use the template
as it is, and just override some variables using environment
variables. Since we are writing this already as program in a file, I
choose the latter approach.

The default values of the compiler (gnu) and optimization level
(noopt), in variables ~OIFS_COMP~ and ~OIFS_BUILD~, can be read from
the top level configuration file \\
~oifs38r1/make/oifs_conv.cfg~ (in OpenIFS source tree). We will here
give (override) them explicitly:

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# OpenIFS compiler
OIFS_COMP="gnu"

# OpenIFS build type
OIFS_BUILD="opt"
#+END_SRC

Let us also override the default install root

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# OpenIFS install root
OIFS_DEST_DIR="${USERAPPL}/oifs/gnu-opt"
#+END_SRC

*** Compile options

Compile flags influence the type of the compiled object files. Here we
instruct the compiler to generate reasonably optimized code that is
suitable for regular production runs, and where to find the include
files for MKL. NOTE: Sometimes we may need to drop the optimization
level to ~-O1~.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# Compile options
OIFS_FFLAGS="-O2 -fconvert=big-endian -fopenmp
             $(mkltool -opts ${mklopts})"
#+END_SRC

*** Link options

Do not be fooled by the fact that the linker is often called with the
same name as the compiler. Link step, where different object files are
linked together to produce an executable, is a separate task from the
compile step, in which the plain-text source files are compiled into
the binary object files.

Often build systems include the compile options in the link options by
default. Most of the time they do no harm, and often include some
options that also the linker needs to be avare of, such as enabling
the OpenMP parallelization. FCM does not seem to include compile
options automatically into the link options, so I'll add OpenMP option
explicitly here.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# Generic link options
OIFS_LFLAGS="-fopenmp"
#+END_SRC

The options needed for linking the MKL and the grib-api libraries
could in principle have gone to the previous definition, too. However,
default configure template sets unsuitable values (certain to fail)
for the varibles below, which would need to be nullified explicitly
anyway, so I will just set them explicitly.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# BLAS and LAPACK link options and grib-api root directory
OIFS_LAPACK_LIB="$(mkltool -libs ${mklopts})"
OIFS_GRIB_API_DIR="$GRIB_API_DIR"
#+END_SRC

Unlike for the ~OIFS_LAPACK_LIB~ variable, the value of the variable
~OIFS_GRIB_API_DIR~ does not go into the link line in verbatim, but is
used by the build system to generate suitable link options.

*Q:* We can instruct the linker to hard code the paths to the shared
     libraries into the executable. That would make the executable
     independent of the value of the LD_LIBRARY_PATH variable at
     runtime. What options would we need here?

*** Exported variables

Only exported variables are visible (in scope) for sub-shells. The
next line exports all variables that OpenIFS build system uses,
i.e. the variable names which begin with ~OIFS_~:

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_env_gnu_taito.bash
# Export all variables OIFS_*
export $(compgen -A variable OIFS_)
#+END_SRC


** Build script

Now, we have defined all the required environment variables in file
~oifs_env_gnu_taito.bash~, and we are ready to write the actions
needed to build OpenIFS in file ~oifs_build.bash~.

*** Bash options

Usually one gives options to programs at the time they are started.
As bash is interpreter, you can tell it how to behave within the
scripts, too. The line below tells bash to stop immediately if any of
the commands fail, if the exit status of the last command is nonzero,
to be exact, and that it should echo all commands that it runs.

#+BEGIN_SRC bash -n :tangle ../scripts/oifs_build.bash
# Bash options
set -ex
#+END_SRC

*Q:* Giving ~set -e~ in interactive bash shell might be annoying. Why?

*** Passing an argument to the script

I choose to pass the path name to OpenIFS source tar ball
~oifs38r1.tgz~ as the first argument to the build script.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_build.bash
# Script's arguments processing
tarball=$1
if [[ ! -f "${tarball}" ]]; then
    1>&2 echo "OpenIFS source tar ball should be the first argument"
    exit 1
fi
#+END_SRC

If the OpenIFS sources were available in GitHub or some other public
repository, there would be no need to pass the location of the source
as an argument. It could be hard coded into the build program.

*** Build directory

Let's next set the directory in which the actual build is run. In
general, we want to run a build in a temporary directory because the
build generates lot's of small files which are not needed later. Also,
the ~/tmp~ disc is local to the login nodes in taito, which takes away
the unnecessary load (frequent metadata access) from the parallel file
system.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_build.bash
# Build directory root
: ${builddir:=${TMPDIR:=/tmp}}
#+END_SRC

*Q:* Colon ~:~ is the first word on the line, so it ... is a command?
What does it do? How does the above command with /parameter
expansions/ exactly work?  Which cases does it cover?

*** Preparing the sources

Let's first make the build directory if it does not already
exist. Then unpack the source in there.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_build.bash
# Unpack original source tar ball
mkdir -p ${builddir}
cd $_
tar xf ${tarball}
#+END_SRC

Intel compiler version 16.0.0 has a minor issue with the source, so we
will need to patch the source, too.

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_build.bash
# Patch source
url=https://raw.githubusercontent.com/jlento/NumLab2016/master/scripts
find $(basename ${tarball%%.*}) -name sufa.F90 \
    -execdir bash -c "patch -p4 < <(curl -s $url/sufa.patch)" \;
#+END_SRC

Command ~find~ has super powers (it is a higher order function, in a
way), but it may be hard on the I/O system. Use it on reasonable sized
directory trees (it's 1st argument), or limit the search depth.

*** Build

Now that everything is in place and properly configured, the build is
easy. Fcm build tool takes some arguments in addition to the top
level configuration file ~oifs_conv.cfg~:

#+BEGIN_SRC bash +n :tangle ../scripts/oifs_build.bash
# Run the build
cd ${builddir}/$(basename ${tarball%%.*})/make
../fcm/bin/fcm make -v --new -j4 -f oifs_conv.cfg
#+END_SRC

*Q:* What do the fcm options do?

** Running the build script

Congratulations! Now all that remains to do is to run our build
script. If you cloned the GitHub repository to the local disc in taito in
directory ~${HOME}/github/NumLab2016~, and the path name of OpenIFS source
tar ball is ~${USERAPPL}/oifs/src/oifs38r1.tgz~, you can run the
script with

#+BEGIN_SRC bash :results silent
scriptdir=~/github/NumLab2016/scripts
tarball=${USERAPPL}/oifs/src/oifs38r1.tgz
bash <(cat ${scriptdir}/oifs_{env_gnu_taito,build}.bash) ${tarball}
#+END_SRC

Or, you can run it directly from GitHub!

#+BEGIN_SRC bash :results silent
url=https://raw.githubusercontent.com/jlento/NumLab2016/master/scripts
tarball=${USERAPPL}/oifs/src/oifs38r1.tgz
bash <(curl -s ${url}/oifs_{env_gnu_taito,build}.bash) ${tarball}
#+END_SRC

In fact, the above lines is are that is needed to build OpenIFS on
taito, now.

** And the exercise?

The basic exercise is to repeat the build using Intel compiler. At the
simplest, it can be just concatenating the two build script files
together and editing and testing the script on taito until it works.

There are many ways that you can make the exercise more
interesting. For example, you can open a GitHub accout, fork my
NumLab2016 repository, develop the new build script properly, and when
done, make a pull request to my original repository about the new
build Intel script or other improvements. And/or, hardcode the paths
to the shared libraries to the executable. And/or, if you have an
account in ~sisu.csc.fi~, you can build OpenIFS there, using GNU
Intel or Cray compilers, and maybe link the BLAS and LAPACK routines
from Cray's LibSci math library instead of from Intel's MKL. In sisu
you can use the static linking scheme which is the default in Cray's
environment.
